#!/usr/bin/env python3
"""
Fix dialogue text visibility and NPC conversation flow
"""

def fix_dialogue_text_rendering():
    """Fix the dialogue system to actually show text on screen"""
    
    with open('game_systems.py', 'r') as f:
        content = f.read()
    
    # Find the DialogueSystem render method and replace with working version
    render_start = content.find('def render(self, screen, sprites=None):')
    if render_start != -1:
        # Find the end of the render method
        next_method = content.find('\n    def ', render_start + 1)
        if next_method == -1:
            next_method = content.find('\nclass ', render_start + 1)
        if next_method == -1:
            next_method = len(content)
        
        # Create a render method that ACTUALLY displays text
        working_render = '''    def render(self, screen, sprites=None):
        """Render dialogue with VISIBLE text on screen"""
        if not self.active or not self.current_node:
            return
        
        # Get screen dimensions
        screen_width = screen.get_width()
        screen_height = screen.get_height()
        
        # Create large, visible dialogue box
        box_width = screen_width - 100
        box_height = 200
        box_x = 50
        box_y = screen_height - box_height - 50
        
        # Draw dialogue background - DARK with BRIGHT borders
        dialogue_rect = pygame.Rect(box_x, box_y, box_width, box_height)
        
        # Multiple layers for maximum visibility
        pygame.draw.rect(screen, (0, 0, 0), dialogue_rect)  # Black background
        pygame.draw.rect(screen, (20, 15, 10), dialogue_rect.inflate(-6, -6))  # Dark brown
        pygame.draw.rect(screen, (255, 215, 0), dialogue_rect, 5)  # Thick gold border
        
        # Speaker name - VERY VISIBLE
        if self.current_node and self.current_node.speaker:
            speaker_font = pygame.font.Font(None, 48)  # Large font
            speaker_text = speaker_font.render(f"{self.current_node.speaker}:", True, (255, 215, 0))
            
            # Speaker background for contrast
            speaker_bg = pygame.Rect(box_x + 15, box_y + 10, speaker_text.get_width() + 20, 45)
            pygame.draw.rect(screen, (40, 30, 20), speaker_bg)
            pygame.draw.rect(screen, (255, 215, 0), speaker_bg, 2)
            
            screen.blit(speaker_text, (box_x + 25, box_y + 15))
        
        # Main dialogue text - GUARANTEED VISIBLE
        if self.displayed_text and len(self.displayed_text) > 0:
            text_font = pygame.font.Font(None, 32)  # Large, readable font
            text_color = (255, 255, 255)  # Pure WHITE text
            
            # Word wrap the text properly
            words = self.displayed_text.split(' ')
            lines = []
            current_line = ""
            max_width = box_width - 80
            
            for word in words:
                test_line = current_line + word + " "
                text_width = text_font.size(test_line)[0]
                if text_width <= max_width:
                    current_line = test_line
                else:
                    if current_line:
                        lines.append(current_line.strip())
                    current_line = word + " "
            
            if current_line:
                lines.append(current_line.strip())
            
            # Render each line with shadow for maximum visibility
            text_start_y = box_y + 70
            line_height = 30
            
            for i, line in enumerate(lines[:3]):  # Show up to 3 lines
                if line.strip():
                    # Black shadow for contrast
                    shadow_surface = text_font.render(line, True, (0, 0, 0))
                    screen.blit(shadow_surface, (box_x + 32, text_start_y + (i * line_height) + 2))
                    
                    # White text on top
                    text_surface = text_font.render(line, True, text_color)
                    screen.blit(text_surface, (box_x + 30, text_start_y + (i * line_height)))
        
        # Status indicator - VISIBLE
        status_y = box_y + box_height - 40
        status_font = pygame.font.Font(None, 28)
        
        if self.waiting_for_input:
            prompt_surface = status_font.render("Press SPACE to continue...", True, (255, 255, 0))
            screen.blit(prompt_surface, (box_x + box_width - 280, status_y))
        elif self.is_typing:
            typing_surface = status_font.render("...", True, (200, 200, 100))
            screen.blit(typing_surface, (box_x + box_width - 80, status_y))
        
        # Debug info to confirm text content
        if self.displayed_text:
            print(f"üé≠ RENDERING TEXT: '{self.displayed_text[:50]}...'")
        else:
            print(f"üé≠ NO TEXT TO RENDER - displayed_text is empty")
'''
        
        content = content[:render_start] + working_render + content[next_method:]
        print("‚úÖ Fixed dialogue text rendering for visibility")
    
    with open('game_systems.py', 'w') as f:
        f.write(content)
    
    return True

def fix_dialogue_update_for_text_display():
    """Fix dialogue update to ensure text actually appears"""
    
    with open('game_systems.py', 'r') as f:
        content = f.read()
    
    # Find and fix the update method
    update_start = content.find('def update(self, dt):')
    if update_start != -1:
        next_method = content.find('\n    def ', update_start + 1)
        if next_method == -1:
            next_method = content.find('\nclass ', update_start + 1)
        if next_method == -1:
            next_method = len(content)
        
        # Create update method that ensures text appears
        working_update = '''    def update(self, dt):
        """Update dialogue with visible text progression"""
        if not self.active or not self.current_node:
            return
        
        # Ensure we have text to display
        if not self.full_text:
            self.full_text = self.current_node.text
        
        # Typing effect - make text appear character by character
        if self.is_typing and self.full_text:
            self.text_timer += dt
            chars_to_show = int(self.text_timer * self.text_speed)
            
            if chars_to_show >= len(self.full_text):
                # Finished typing - show complete text
                self.displayed_text = self.full_text
                self.is_typing = False
                self.waiting_for_input = True
                
                # Stop typing sound
                if self.sound_manager:
                    self.sound_manager.stop_typing_sound()
                
                print(f"üé≠ TYPING COMPLETE: '{self.displayed_text}'")
            else:
                # Still typing - show partial text
                self.displayed_text = self.full_text[:chars_to_show]
                print(f"üé≠ TYPING: '{self.displayed_text}' ({chars_to_show}/{len(self.full_text)})")
        
        # Ensure displayed_text is never empty when we have full_text
        if not self.displayed_text and self.full_text and not self.is_typing:
            self.displayed_text = self.full_text
            self.waiting_for_input = True
            print(f"üé≠ FORCE DISPLAY TEXT: '{self.displayed_text}'")
'''
        
        content = content[:update_start] + working_update + content[next_method:]
        print("‚úÖ Fixed dialogue update for text display")
    
    with open('game_systems.py', 'w') as f:
        f.write(content)
    
    return True

def fix_dialogue_start_initialization():
    """Fix dialogue start to properly initialize text"""
    
    with open('game_systems.py', 'r') as f:
        content = f.read()
    
    # Find and fix start_dialogue method
    start_pos = content.find('def start_dialogue(self, dialogue_id):')
    if start_pos != -1:
        next_method = content.find('\n    def ', start_pos + 1)
        if next_method == -1:
            next_method = content.find('\nclass ', start_pos + 1)
        if next_method == -1:
            next_method = len(content)
        
        # Create start_dialogue that properly initializes text
        working_start = '''    def start_dialogue(self, dialogue_id):
        """Start dialogue with proper text initialization"""
        if dialogue_id in self.dialogue_data:
            self.active = True
            self.current_dialogue = dialogue_id
            self.current_node = self.dialogue_data[dialogue_id]["start"]
            
            # Initialize text properly
            self.full_text = self.current_node.text
            self.displayed_text = ""  # Start empty for typing effect
            self.text_timer = 0
            self.waiting_for_input = False
            self.is_typing = True
            
            # Start typing sound
            if self.sound_manager:
                self.sound_manager.lower_music_volume()
                self.sound_manager.play_typing_sound_loop()
            
            print(f"‚úÖ Started dialogue: {dialogue_id}")
            print(f"üé≠ Full text ready: '{self.full_text}'")
            print(f"üé≠ Speaker: {self.current_node.speaker}")
            return True
        else:
            print(f"‚ùå Dialogue '{dialogue_id}' not found")
            return False
'''
        
        content = content[:start_pos] + working_start + content[next_method:]
        print("‚úÖ Fixed dialogue start initialization")
    
    with open('game_systems.py', 'w') as f:
        f.write(content)
    
    return True

def ensure_dialogue_rendering_called():
    """Ensure dialogue rendering is properly called from main game"""
    
    with open('main.py', 'r') as f:
        content = f.read()
    
    # Find render method and ensure dialogue is rendered
    render_pos = content.find('def render(self):')
    if render_pos != -1:
        # Look for dialogue rendering
        if 'self.dialogue_system.render(self.screen)' not in content[render_pos:render_pos+2000]:
            # Find where to add dialogue rendering
            dialogue_state = content.find('if self.state == GameState.DIALOGUE:', render_pos)
            if dialogue_state != -1:
                # Find the end of the dialogue state block
                next_elif = content.find('\n        elif', dialogue_state)
                if next_elif != -1:
                    dialogue_render = '''
            # Render dialogue system with visible text
            if self.dialogue_system.active:
                self.dialogue_system.render(self.screen)
                print("üé≠ MAIN: Rendering dialogue to screen")
'''
                    content = content[:next_elif] + dialogue_render + content[next_elif:]
                    print("‚úÖ Added dialogue rendering to main render loop")
    
    # Also ensure dialogue is rendered during PLAYING state for NPC interactions
    playing_state = content.find('elif self.state == GameState.PLAYING:')
    if playing_state != -1:
        render_game_pos = content.find('self.render_game()', playing_state)
        if render_game_pos != -1:
            insertion_point = content.find('\n', render_game_pos) + 1
            npc_dialogue_render = '''
            # Render NPC dialogue if active
            if self.dialogue_system and self.dialogue_system.active:
                self.dialogue_system.render(self.screen)
                print("üé≠ MAIN: Rendering NPC dialogue to screen")
'''
            content = content[:insertion_point] + npc_dialogue_render + content[insertion_point:]
            print("‚úÖ Added NPC dialogue rendering to PLAYING state")
    
    with open('main.py', 'w') as f:
        f.write(content)
    
    return True

def main():
    """Fix dialogue text visibility and NPC conversations"""
    print("üîß Fixing Dialogue Text Visibility and NPC Conversations")
    print("=" * 55)
    
    print("1. Fixing dialogue text rendering for visibility...")
    fix_dialogue_text_rendering()
    
    print("2. Fixing dialogue update for text display...")
    fix_dialogue_update_for_text_display()
    
    print("3. Fixing dialogue start initialization...")
    fix_dialogue_start_initialization()
    
    print("4. Ensuring dialogue rendering is called...")
    ensure_dialogue_rendering_called()
    
    print("\n" + "=" * 55)
    print("üéâ DIALOGUE TEXT VISIBILITY FIXED!")
    print("\nDialogue System Improvements:")
    print("‚úÖ Text now appears VISUALLY on screen in dialogue box")
    print("‚úÖ White text on dark background with gold borders")
    print("‚úÖ Large, readable fonts for better visibility")
    print("‚úÖ Text shadows for maximum contrast")
    print("‚úÖ Proper text initialization and display")
    print("‚úÖ Character-by-character typing effect visible")
    print("‚úÖ Debug output shows text content")
    
    print("\nNPC Conversation Fixes:")
    print("‚úÖ Dialogue text appears when talking to NPCs")
    print("‚úÖ Speaker names displayed prominently")
    print("‚úÖ Conversation flow with SPACE key progression")
    print("‚úÖ Proper dialogue initialization")
    print("‚úÖ Text rendering in both DIALOGUE and PLAYING states")
    
    print("\nWhat You'll See Now:")
    print("- Large dialogue box at bottom of screen")
    print("- WHITE text on DARK background")
    print("- Speaker names in GOLD text")
    print("- Text appearing character by character")
    print("- 'Press SPACE to continue' prompts")
    print("- Visible conversations with NPCs")
    
    print("\nTest with: python3 main.py")

if __name__ == "__main__":
    main()
