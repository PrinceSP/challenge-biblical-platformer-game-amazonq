#!/usr/bin/env python3
"""
Enhance game: Fix ground positioning and optimize performance for better FPS
"""

def fix_ground_positioning():
    """Fix ground to stay at bottom while camera follows player vertically"""
    
    with open('game_classes.py', 'r') as f:
        content = f.read()
    
    # Find the LevelManager render method and fix ground rendering
    old_render_background = '''    def render_background(self, screen, camera_offset):
        """Render scrolling background like Mario Bros"""
        if self.background:
            # Scale background to fit screen height
            bg_width = self.background.get_width()
            bg_height = self.background.get_height()
            
            # Scale to fit screen height while maintaining aspect ratio
            scale_factor = SCREEN_HEIGHT / bg_height
            scaled_width = int(bg_width * scale_factor)
            scaled_height = SCREEN_HEIGHT
            
            # Create scaled background
            scaled_bg = pygame.transform.scale(self.background, (scaled_width, scaled_height))
            
            # Calculate how many background tiles we need
            tiles_needed = (SCREEN_WIDTH // scaled_width) + 2
            
            # Calculate starting position based on camera
            start_x = -(camera_offset[0] % scaled_width)
            
            # Render tiled background
            for i in range(tiles_needed):
                x_pos = start_x + (i * scaled_width)
                screen.blit(scaled_bg, (x_pos, -camera_offset[1]))'''
    
    new_render_background = '''    def render_background(self, screen, camera_offset):
        """Render scrolling background with FIXED GROUND positioning"""
        if self.background:
            # Scale background to fit screen height
            bg_width = self.background.get_width()
            bg_height = self.background.get_height()
            
            # Scale to fit screen height while maintaining aspect ratio
            scale_factor = SCREEN_HEIGHT / bg_height
            scaled_width = int(bg_width * scale_factor)
            scaled_height = SCREEN_HEIGHT
            
            # Create scaled background
            scaled_bg = pygame.transform.scale(self.background, (scaled_width, scaled_height))
            
            # Calculate how many background tiles we need
            tiles_needed = (SCREEN_WIDTH // scaled_width) + 2
            
            # Calculate starting position based on camera (HORIZONTAL ONLY)
            start_x = -(camera_offset[0] % scaled_width)
            
            # Render tiled background - GROUND STAYS AT BOTTOM
            for i in range(tiles_needed):
                x_pos = start_x + (i * scaled_width)
                # FIXED: Ground stays at bottom regardless of camera Y position
                ground_y = SCREEN_HEIGHT - scaled_height
                screen.blit(scaled_bg, (x_pos, ground_y))'''
    
    if old_render_background in content:
        content = content.replace(old_render_background, new_render_background)
        print("‚úÖ Fixed background/ground rendering to stay at bottom")
    
    # Also fix ground platform rendering
    old_ground_render = '''        # Render ground platform at bottom
        ground_rect = pygame.Rect(0, SCREEN_HEIGHT - 50, SCREEN_WIDTH * 5, 50)
        ground_render_rect = ground_rect.copy()
        ground_render_rect.x -= camera_offset[0]
        ground_render_rect.y -= camera_offset[1]
        pygame.draw.rect(screen, (139, 69, 19), ground_render_rect)
        pygame.draw.rect(screen, (101, 67, 33), ground_render_rect, 3)'''
    
    new_ground_render = '''        # Render ground platform FIXED at bottom of screen
        ground_rect = pygame.Rect(0, SCREEN_HEIGHT - 50, SCREEN_WIDTH * 5, 50)
        ground_render_rect = ground_rect.copy()
        ground_render_rect.x -= camera_offset[0]
        # FIXED: Ground Y position stays at bottom regardless of camera
        ground_render_rect.y = SCREEN_HEIGHT - 50
        pygame.draw.rect(screen, (139, 69, 19), ground_render_rect)
        pygame.draw.rect(screen, (101, 67, 33), ground_render_rect, 3)'''
    
    if old_ground_render in content:
        content = content.replace(old_ground_render, new_ground_render)
        print("‚úÖ Fixed ground platform to stay at bottom of screen")
    
    with open('game_classes.py', 'w') as f:
        f.write(content)
    
    return True

def optimize_performance():
    """Optimize game performance for better FPS"""
    
    with open('main.py', 'r') as f:
        content = f.read()
    
    # Add FPS optimization settings
    fps_optimization = '''        # FPS Optimization Settings
        self.target_fps = 60
        self.clock = pygame.time.Clock()
        self.frame_skip = 0  # Skip frames if needed
        self.performance_mode = True
        
        # Reduce debug output for better performance
        self.debug_collision = False
        self.debug_camera = False
        
        print(f"üöÄ Performance optimization enabled - Target FPS: {self.target_fps}")'''
    
    # Find where to add FPS optimization
    init_marker = "def __init__(self):"
    init_pos = content.find(init_marker)
    if init_pos != -1:
        # Find end of __init__ method
        next_method = content.find("\n    def ", init_pos + 1)
        if next_method != -1:
            # Add FPS optimization before the end of __init__
            insertion_point = content.rfind('\n', init_pos, next_method)
            content = content[:insertion_point] + '\n        ' + fps_optimization + content[insertion_point:]
            print("‚úÖ Added FPS optimization settings")
    
    with open('main.py', 'w') as f:
        f.write(content)
    
    return True

def optimize_collision_detection():
    """Optimize collision detection for better performance"""
    
    with open('game_classes.py', 'r') as f:
        content = f.read()
    
    # Optimize platform collision detection
    old_collision = '''        # Debug: Check if we have platforms
        if hasattr(self, 'game_platforms') and self.game_platforms:
            print(f"üîç Checking collision with {len(self.game_platforms)} platforms - Moses at y={self.rect.bottom}")
            
            for i, platform in enumerate(self.game_platforms):
                platform_rect = pygame.Rect(platform['x'], platform['y'], platform['width'], platform['height'])
                
                # Debug collision check
                if i < 3:  # Only debug first 3 platforms to avoid spam
                    print(f"üîç Platform {i}: x={platform['x']}-{platform['x']+platform['width']}, y={platform['y']}, Moses: x={self.rect.x}-{self.rect.right}, y={self.rect.bottom}")
                
                # Check if player is falling onto platform (IMPROVED LOGIC)
                if (self.velocity_y >= 0 and  # Falling or stationary
                    self.rect.bottom >= platform_rect.top - 5 and  # Player bottom near platform top
                    self.rect.bottom <= platform_rect.top + 15 and  # Generous landing tolerance
                    self.rect.right > platform_rect.left + 2 and  # Horizontal overlap (small margin)
                    self.rect.left < platform_rect.right - 2):  # Horizontal overlap (small margin)
                    
                    # Land on platform
                    self.rect.bottom = platform_rect.top
                    self.velocity_y = 0
                    self.on_ground = True
                    self.is_jumping = False
                    platform_collision = True
                    print(f"üèóÔ∏è  ‚úÖ MOSES LANDED ON PLATFORM at x={platform['x']}, y={platform['y']} - SUCCESS!")
                    break
        else:
            print("‚ùå No game_platforms found for collision detection!")'''
    
    new_collision = '''        # OPTIMIZED: Check if we have platforms (reduced debug output)
        if hasattr(self, 'game_platforms') and self.game_platforms:
            # Only check platforms near the player for better performance
            player_x = self.rect.centerx
            nearby_platforms = [p for p in self.game_platforms 
                              if abs(p['x'] + p['width']/2 - player_x) < 500]  # Only check nearby platforms
            
            for platform in nearby_platforms:
                platform_rect = pygame.Rect(platform['x'], platform['y'], platform['width'], platform['height'])
                
                # OPTIMIZED: Check if player is falling onto platform
                if (self.velocity_y >= 0 and  # Falling or stationary
                    self.rect.bottom >= platform_rect.top - 5 and  # Player bottom near platform top
                    self.rect.bottom <= platform_rect.top + 15 and  # Generous landing tolerance
                    self.rect.right > platform_rect.left + 2 and  # Horizontal overlap (small margin)
                    self.rect.left < platform_rect.right - 2):  # Horizontal overlap (small margin)
                    
                    # Land on platform
                    self.rect.bottom = platform_rect.top
                    self.velocity_y = 0
                    self.on_ground = True
                    self.is_jumping = False
                    platform_collision = True
                    # Reduced debug output for performance
                    if hasattr(self, 'debug_collision') and self.debug_collision:
                        print(f"üèóÔ∏è  ‚úÖ MOSES LANDED ON PLATFORM at x={platform['x']}, y={platform['y']}")
                    break'''
    
    if old_collision in content:
        content = content.replace(old_collision, new_collision)
        print("‚úÖ Optimized collision detection for better performance")
    
    with open('game_classes.py', 'w') as f:
        f.write(content)
    
    return True

def optimize_camera_following():
    """Optimize camera following for better performance"""
    
    with open('game_classes.py', 'r') as f:
        content = f.read()
    
    # Optimize camera following
    old_camera_follow = '''        # Debug output for camera tracking
        if abs(y_diff) > self.vertical_deadzone:
            print(f"üìπ Camera following Moses vertically: player_y={player.rect.centery}, camera_y={self.y}")'''
    
    new_camera_follow = '''        # OPTIMIZED: Reduced debug output for better performance
        if hasattr(self, 'debug_camera') and self.debug_camera and abs(y_diff) > self.vertical_deadzone:
            print(f"üìπ Camera following Moses vertically: player_y={player.rect.centery}, camera_y={self.y}")'''
    
    if old_camera_follow in content:
        content = content.replace(old_camera_follow, new_camera_follow)
        print("‚úÖ Optimized camera following debug output")
    
    with open('game_classes.py', 'w') as f:
        f.write(content)
    
    return True

def optimize_rendering():
    """Optimize rendering for better FPS"""
    
    with open('main.py', 'r') as f:
        content = f.read()
    
    # Add rendering optimizations
    old_render_platforms = '''    def render_platforms(self, camera_offset):
        """Render all platforms with consistent colors matching original dark platforms"""
        if not hasattr(self, 'game_platforms'):
            return
        
        import pygame
        
        for platform in self.game_platforms:
            # Calculate screen position
            screen_x = platform['x'] - camera_offset[0]
            screen_y = platform['y'] - camera_offset[1]
            
            # Only render platforms that are visible on screen
            if -50 <= screen_x <= SCREEN_WIDTH + 50 and -50 <= screen_y <= SCREEN_HEIGHT + 50:
                # Create platform rectangle
                platform_rect = pygame.Rect(screen_x, screen_y, platform['width'], platform['height'])
                
                # Draw platform with consistent brown stone color (matching original dark platforms)
                pygame.draw.rect(self.screen, (139, 69, 19), platform_rect)    # Brown stone (same as original)
                pygame.draw.rect(self.screen, (101, 67, 33), platform_rect, 3) # Dark brown border
                pygame.draw.rect(self.screen, (160, 82, 45), (screen_x + 2, screen_y + 2, platform['width'] - 4, 4))  # Light brown highlight
                
                # Add subtle texture lines
                for i in range(2, platform['width'] - 2, 8):
                    pygame.draw.line(self.screen, (120, 60, 15), 
                                   (screen_x + i, screen_y + 1), 
                                   (screen_x + i, screen_y + platform['height'] - 1))'''
    
    new_render_platforms = '''    def render_platforms(self, camera_offset):
        """OPTIMIZED: Render platforms with better performance"""
        if not hasattr(self, 'game_platforms'):
            return
        
        import pygame
        
        # OPTIMIZATION: Pre-calculate screen bounds for culling
        left_bound = -50
        right_bound = SCREEN_WIDTH + 50
        top_bound = -50
        bottom_bound = SCREEN_HEIGHT + 50
        
        for platform in self.game_platforms:
            # Calculate screen position
            screen_x = platform['x'] - camera_offset[0]
            screen_y = platform['y'] - camera_offset[1]
            
            # OPTIMIZED: Early culling check
            if not (left_bound <= screen_x <= right_bound and top_bound <= screen_y <= bottom_bound):
                continue
            
            # Create platform rectangle
            platform_rect = pygame.Rect(screen_x, screen_y, platform['width'], platform['height'])
            
            # OPTIMIZED: Simplified rendering for better performance
            pygame.draw.rect(self.screen, (139, 69, 19), platform_rect)    # Brown stone
            pygame.draw.rect(self.screen, (101, 67, 33), platform_rect, 2) # Border (reduced thickness)
            
            # OPTIMIZED: Reduced texture details for better FPS
            if platform['width'] > 60:  # Only add details to larger platforms
                pygame.draw.rect(self.screen, (160, 82, 45), (screen_x + 2, screen_y + 2, platform['width'] - 4, 3))'''
    
    if old_render_platforms in content:
        content = content.replace(old_render_platforms, new_render_platforms)
        print("‚úÖ Optimized platform rendering for better FPS")
    
    with open('main.py', 'w') as f:
        f.write(content)
    
    return True

def add_fps_counter():
    """Add FPS counter and performance monitoring"""
    
    with open('main.py', 'r') as f:
        content = f.read()
    
    # Add FPS counter to render method
    fps_counter_code = '''        
        # FPS Counter and Performance Monitoring
        if hasattr(self, 'clock'):
            fps = self.clock.get_fps()
            if fps > 0:  # Avoid division by zero
                fps_text = self.font_manager.get_font('small').render(f"FPS: {fps:.1f}", True, (255, 255, 255))
                self.screen.blit(fps_text, (10, 10))
                
                # Performance warning
                if fps < 30:
                    warning_text = self.font_manager.get_font('small').render("Low FPS - Consider reducing quality", True, (255, 255, 0))
                    self.screen.blit(warning_text, (10, 35))'''
    
    # Find render method and add FPS counter
    render_method_pos = content.find("def render(self):")
    if render_method_pos != -1:
        # Find end of render method
        next_method = content.find("\n    def ", render_method_pos + 1)
        if next_method != -1:
            # Add FPS counter before end of render method
            insertion_point = content.rfind('\n        pygame.display.flip()', render_method_pos, next_method)
            if insertion_point != -1:
                content = content[:insertion_point] + fps_counter_code + content[insertion_point:]
                print("‚úÖ Added FPS counter and performance monitoring")
    
    with open('main.py', 'w') as f:
        f.write(content)
    
    return True

def main():
    """Enhance game: Fix ground positioning and optimize performance"""
    print("üöÄ Enhancing Game: Ground Positioning and Performance Optimization")
    print("=" * 70)
    
    print("1. Fixing ground positioning to stay at bottom...")
    fix_ground_positioning()
    
    print("2. Optimizing performance for better FPS...")
    optimize_performance()
    
    print("3. Optimizing collision detection...")
    optimize_collision_detection()
    
    print("4. Optimizing camera following...")
    optimize_camera_following()
    
    print("5. Optimizing rendering performance...")
    optimize_rendering()
    
    print("6. Adding FPS counter and monitoring...")
    add_fps_counter()
    
    print("\n" + "=" * 70)
    print("üéâ GAME ENHANCEMENT COMPLETE!")
    print("\nGround Positioning Fixes:")
    print("‚úÖ Ground/background stays at bottom of screen")
    print("‚úÖ Only camera follows player vertically")
    print("‚úÖ Ground platform fixed at bottom regardless of camera Y")
    print("‚úÖ Professional platformer ground behavior")
    print("\nPerformance Optimizations:")
    print("‚úÖ Target 60 FPS with performance monitoring")
    print("‚úÖ Optimized collision detection (nearby platforms only)")
    print("‚úÖ Reduced debug output for better performance")
    print("‚úÖ Optimized platform rendering with culling")
    print("‚úÖ Simplified texture details for better FPS")
    print("‚úÖ FPS counter and performance warnings")
    print("\nEnhanced Features:")
    print("- Ground stays at bottom while camera follows Moses vertically")
    print("- Collision detection only checks nearby platforms (500px range)")
    print("- Reduced debug spam for smoother gameplay")
    print("- Optimized rendering with early culling")
    print("- FPS counter shows real-time performance")
    print("- Performance warnings when FPS drops below 30")
    print("\nTest with: python3 main.py")

if __name__ == "__main__":
    main()
